[
    {
      typeName: "ControllerInterfaceApiDescriptionModel",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "type",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "MethodParameterApiDescriptionModel",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "typeAsString",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "type",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "typeSimple",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isOptional",
            desc: "",
            required: false,
          },
          {
            nullable: true,
            name: "defaultValue",
            type: "any",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ParameterApiDescriptionModel",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "nameOnMethod",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "type",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "typeSimple",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isOptional",
            desc: "",
            required: false,
          },
          {
            nullable: true,
            name: "defaultValue",
            type: "any",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "constraintTypes",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "bindingSourceId",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "descriptorName",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ReturnValueApiDescriptionModel",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "type",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "typeSimple",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ActionApiDescriptionModel",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "uniqueName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "httpMethod",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "url",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "supportedVersions",
            desc: "",
            required: false,
          },
          {
            type: "MethodParameterApiDescriptionModel[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.Http.Modeling.MethodParameterApiDescriptionModel",
            },
            nullable: true,
            name: "parametersOnMethod",
            desc: "",
            required: false,
          },
          {
            type: "ParameterApiDescriptionModel[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.Http.Modeling.ParameterApiDescriptionModel",
            },
            nullable: true,
            name: "parameters",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.Http.Modeling.ReturnValueApiDescriptionModel",
            name: "returnValue",
            type: "ReturnValueApiDescriptionModel",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ControllerApiDescriptionModel",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "controllerName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "type",
            desc: "",
            required: false,
          },
          {
            type: "ControllerInterfaceApiDescriptionModel[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.Http.Modeling.ControllerInterfaceApiDescriptionModel",
            },
            nullable: true,
            name: "interfaces",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
              $ref: "#/components/schemas/Volo.Abp.Http.Modeling.ActionApiDescriptionModel",
            },
            nullable: true,
            name: "actions",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ModuleApiDescriptionModel",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "rootPath",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "remoteServiceName",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
              $ref: "#/components/schemas/Volo.Abp.Http.Modeling.ControllerApiDescriptionModel",
            },
            nullable: true,
            name: "controllers",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "PropertyApiDescriptionModel",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "type",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "typeSimple",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isRequired",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "TypeApiDescriptionModel",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "baseType",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isEnum",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "enumNames",
            desc: "",
            required: false,
          },
          {
            type: "any[]",
            items: {
            },
            nullable: true,
            name: "enumValues",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "genericArguments",
            desc: "",
            required: false,
          },
          {
            type: "PropertyApiDescriptionModel[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.Http.Modeling.PropertyApiDescriptionModel",
            },
            nullable: true,
            name: "properties",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ApplicationApiDescriptionModel",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
              $ref: "#/components/schemas/Volo.Abp.Http.Modeling.ModuleApiDescriptionModel",
            },
            nullable: true,
            name: "modules",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
              $ref: "#/components/schemas/Volo.Abp.Http.Modeling.TypeApiDescriptionModel",
            },
            nullable: true,
            name: "types",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "RemoteServiceValidationErrorInfo",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "message",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "members",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "RemoteServiceErrorInfo",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "code",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "message",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "details",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            name: "data",
            desc: "",
            required: false,
          },
          {
            type: "RemoteServiceValidationErrorInfo[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.Http.RemoteServiceValidationErrorInfo",
            },
            nullable: true,
            name: "validationErrors",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "RemoteServiceErrorResponse",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            $ref: "#/components/schemas/Volo.Abp.Http.RemoteServiceErrorInfo",
            name: "error",
            type: "RemoteServiceErrorInfo",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "LanguageInfo",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            readOnly: true,
            name: "cultureName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            readOnly: true,
            name: "uiCultureName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            readOnly: true,
            name: "displayName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "flagIcon",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "DateTimeFormatDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "calendarAlgorithmType",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "dateTimeFormatLong",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "shortDatePattern",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "fullDateTimePattern",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "dateSeparator",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "shortTimePattern",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "longTimePattern",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "CurrentCultureDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "displayName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "englishName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "threeLetterIsoLanguageName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "twoLetterIsoLanguageName",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isRightToLeft",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "cultureName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "nativeName",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.DateTimeFormatDto",
            name: "dateTimeFormat",
            type: "DateTimeFormatDto",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "NameValue",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "value",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ApplicationLocalizationConfigurationDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
              type: "object",
              additionalProperties: {
                type: "string",
              },
            },
            nullable: true,
            name: "values",
            desc: "",
            required: false,
          },
          {
            type: "LanguageInfo[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.Localization.LanguageInfo",
            },
            nullable: true,
            name: "languages",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.CurrentCultureDto",
            name: "currentCulture",
            type: "CurrentCultureDto",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "defaultResourceName",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
              type: "array",
              items: {
                $ref: "#/components/schemas/Volo.Abp.NameValue",
              },
            },
            nullable: true,
            name: "languagesMap",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
              type: "array",
              items: {
                $ref: "#/components/schemas/Volo.Abp.NameValue",
              },
            },
            nullable: true,
            name: "languageFilesMap",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ApplicationAuthConfigurationDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
              type: "boolean",
            },
            nullable: true,
            name: "policies",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
              type: "boolean",
            },
            nullable: true,
            name: "grantedPolicies",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ApplicationSettingConfigurationDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
              type: "string",
            },
            nullable: true,
            name: "values",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "CurrentUserDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "boolean",
            name: "isAuthenticated",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "uuid",
            nullable: true,
            name: "id",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "uuid",
            nullable: true,
            name: "tenantId",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "userName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "surName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "email",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "emailVerified",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "phoneNumber",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "phoneNumberVerified",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "roles",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ApplicationFeatureConfigurationDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
              type: "string",
            },
            nullable: true,
            name: "values",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "MultiTenancyInfoDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "boolean",
            name: "isEnabled",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "CurrentTenantDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            format: "uuid",
            nullable: true,
            name: "id",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isAvailable",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "IanaTimeZone",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "timeZoneName",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "WindowsTimeZone",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "timeZoneId",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "TimeZone",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.IanaTimeZone",
            name: "iana",
            type: "IanaTimeZone",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.WindowsTimeZone",
            name: "windows",
            type: "WindowsTimeZone",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "TimingDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.TimeZone",
            name: "timeZone",
            type: "TimeZone",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ClockDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "kind",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "LocalizableStringDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            readOnly: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "resource",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ExtensionPropertyApiGetDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "boolean",
            name: "isAvailable",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ExtensionPropertyApiCreateDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "boolean",
            name: "isAvailable",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ExtensionPropertyApiUpdateDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "boolean",
            name: "isAvailable",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ExtensionPropertyApiDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyApiGetDto",
            name: "onGet",
            type: "ExtensionPropertyApiGetDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyApiCreateDto",
            name: "onCreate",
            type: "ExtensionPropertyApiCreateDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyApiUpdateDto",
            name: "onUpdate",
            type: "ExtensionPropertyApiUpdateDto",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ExtensionPropertyUiTableDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "boolean",
            name: "isVisible",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ExtensionPropertyUiFormDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "boolean",
            name: "isVisible",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ExtensionPropertyUiLookupDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "url",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "resultListPropertyName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "displayPropertyName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "valuePropertyName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "filterParamName",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ExtensionPropertyUiDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyUiTableDto",
            name: "onTable",
            type: "ExtensionPropertyUiTableDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyUiFormDto",
            name: "onCreateForm",
            type: "ExtensionPropertyUiFormDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyUiFormDto",
            name: "onEditForm",
            type: "ExtensionPropertyUiFormDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyUiLookupDto",
            name: "lookup",
            type: "ExtensionPropertyUiLookupDto",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ExtensionPropertyAttributeDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "typeSimple",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            name: "config",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ExtensionPropertyDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "type",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "typeSimple",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.LocalizableStringDto",
            name: "displayName",
            type: "LocalizableStringDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyApiDto",
            name: "api",
            type: "ExtensionPropertyApiDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyUiDto",
            name: "ui",
            type: "ExtensionPropertyUiDto",
            desc: "",
            required: false,
          },
          {
            type: "ExtensionPropertyAttributeDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyAttributeDto",
            },
            nullable: true,
            name: "attributes",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            name: "configuration",
            desc: "",
            required: false,
          },
          {
            nullable: true,
            name: "defaultValue",
            type: "any",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "EntityExtensionDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
              $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyDto",
            },
            nullable: true,
            name: "properties",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            name: "configuration",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ModuleExtensionDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
              $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.EntityExtensionDto",
            },
            nullable: true,
            name: "entities",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            name: "configuration",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ExtensionEnumFieldDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            nullable: true,
            name: "value",
            type: "any",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ExtensionEnumDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "ExtensionEnumFieldDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionEnumFieldDto",
            },
            nullable: true,
            name: "fields",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "localizationResource",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ObjectExtensionsDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
              $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ModuleExtensionDto",
            },
            nullable: true,
            name: "modules",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
              $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionEnumDto",
            },
            nullable: true,
            name: "enums",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ApplicationConfigurationDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ApplicationLocalizationConfigurationDto",
            name: "localization",
            type: "ApplicationLocalizationConfigurationDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ApplicationAuthConfigurationDto",
            name: "auth",
            type: "ApplicationAuthConfigurationDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ApplicationSettingConfigurationDto",
            name: "setting",
            type: "ApplicationSettingConfigurationDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.CurrentUserDto",
            name: "currentUser",
            type: "CurrentUserDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ApplicationFeatureConfigurationDto",
            name: "features",
            type: "ApplicationFeatureConfigurationDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.MultiTenancy.MultiTenancyInfoDto",
            name: "multiTenancy",
            type: "MultiTenancyInfoDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.MultiTenancy.CurrentTenantDto",
            name: "currentTenant",
            type: "CurrentTenantDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.TimingDto",
            name: "timing",
            type: "TimingDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ClockDto",
            name: "clock",
            type: "ClockDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ObjectExtensionsDto",
            name: "objectExtensions",
            type: "ObjectExtensionsDto",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "FindTenantResultDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "boolean",
            name: "success",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "uuid",
            nullable: true,
            name: "tenantId",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "RegisterDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            maxLength: 256,
            minLength: 0,
            type: "string",
            name: "userName",
            desc: "",
            required: true,
          },
          {
            maxLength: 256,
            minLength: 0,
            type: "string",
            format: "email",
            name: "emailAddress",
            desc: "",
            required: true,
          },
          {
            maxLength: 128,
            minLength: 0,
            type: "string",
            format: "password",
            name: "password",
            desc: "",
            required: true,
          },
          {
            type: "string",
            name: "appName",
            desc: "",
            required: true,
          },
        ],
      ],
    },
    {
      typeName: "IdentityUserDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "extraProperties",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "uuid",
            name: "id",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "date-time",
            name: "creationTime",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "uuid",
            nullable: true,
            name: "creatorId",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "date-time",
            nullable: true,
            name: "lastModificationTime",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "uuid",
            nullable: true,
            name: "lastModifierId",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isDeleted",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "uuid",
            nullable: true,
            name: "deleterId",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "date-time",
            nullable: true,
            name: "deletionTime",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "uuid",
            nullable: true,
            name: "tenantId",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "userName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "surname",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "email",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "emailConfirmed",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "phoneNumber",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "phoneNumberConfirmed",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "lockoutEnabled",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "date-time",
            nullable: true,
            name: "lockoutEnd",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "concurrencyStamp",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "SendPasswordResetCodeDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            maxLength: 256,
            minLength: 0,
            type: "string",
            format: "email",
            name: "email",
            desc: "",
            required: true,
          },
          {
            type: "string",
            name: "appName",
            desc: "",
            required: true,
          },
          {
            type: "string",
            nullable: true,
            name: "returnUrl",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "returnUrlHash",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ResetPasswordDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            format: "uuid",
            name: "userId",
            desc: "",
            required: false,
          },
          {
            type: "string",
            name: "resetToken",
            desc: "",
            required: true,
          },
          {
            type: "string",
            name: "password",
            desc: "",
            required: true,
          },
        ],
      ],
    },
    {
      typeName: "FileDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "fileName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "fileType",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "fileToken",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "RecordingProfissionDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "profession",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "mainResearcher",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "jobTitle",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "InspectionInformationDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "checkDate",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "checkType",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "checkResult",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "processingSituation",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "BeianDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "_id",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "recordNo",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "areaName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "address",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "compName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "linkMan",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "linkTel",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            name: "index",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "recordStatus",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "recordStatusText",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "orgLevel",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "recordFirstDate",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "recordChangeDate",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "task_id",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "needupdate",
            desc: "",
            required: false,
          },
          {
            type: "RecordingProfissionDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Beians.RecordingProfissionDto",
            },
            nullable: true,
            name: "recordingProfessions",
            desc: "",
            required: false,
          },
          {
            type: "InspectionInformationDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Beians.InspectionInformationDto",
            },
            nullable: true,
            name: "inspectionInformations",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "otherAddresss",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "0CultureneutralPublicKeyTokennull",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "BeianDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Beians.BeianDto",
            },
            nullable: true,
            name: "items",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int64",
            name: "totalCount",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "0CultureneutralPublicKeyToken7cec85d7bea7798e",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "id",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "RemoteOperatorResultDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "request",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "response",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "result",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ProjectDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "registrationNo",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "relatedRegistrationNumber",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "lastProtocolNo",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "versionDate",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "isCombineMedicine",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "indication",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "protocolNo",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "sponsorConcatName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "firstPublishDate",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "acceptNo",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "popularTitle",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "studyTitle",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "drugName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "drugClassification",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "studyStatus",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "studyStatus2",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            readOnly: true,
            name: "recruitStatus",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "otherInfo",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "firstSubjectKnowDate",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "firstSubjectEncroEnrollmentDate",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "testStopDate",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "SponsorInfoDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "sponsorNames",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "concatName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "tel",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "phone",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "email",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "address",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "zipCode",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "MainInvestigatorDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "jobTitle",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "tel",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "email",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "address",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "zipCode",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "companyName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "certification",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ClinicalTrialInformationDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "testPurpose",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "testType",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "testStaging",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "testDesignType",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "testRandomization",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "testBlind",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "testRange",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "subjectAge",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "subjectGeneder",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "subjectHealth",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "subjectTargetEnrollment",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "subjectActualEnrollment",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "subjectDMC",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "subjectInjuryInsurance",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "subjectEnrollmented",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "subjectType",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "subjectAgeMin",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "subjectAgeMax",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "subjectNumMin",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "subjectNumMax",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "enrolledNum",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "date-time",
            nullable: true,
            name: "firstDate",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "date-time",
            nullable: true,
            name: "firstKnowDate",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "date-time",
            nullable: true,
            name: "finishDate",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "HospitalDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "no",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "mainSponsorName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "state",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "province",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "city",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ECDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "no",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "approveResult",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "approveDate",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "SubjectCriteriaDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "registrationNo",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            name: "criteriaType",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            name: "serialNum",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "criteriaText",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "CdeDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "_id",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "needUpdate",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "needUpdateSource",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Wetrial.Spider.CallApi.Cdes.ProjectDto",
            name: "project",
            type: "ProjectDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Wetrial.Spider.CallApi.Cdes.SponsorInfoDto",
            name: "sponsorInfo",
            type: "SponsorInfoDto",
            desc: "",
            required: false,
          },
          {
            type: "MainInvestigatorDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Cdes.MainInvestigatorDto",
            },
            nullable: true,
            name: "mainInvestigators",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Wetrial.Spider.CallApi.Cdes.ClinicalTrialInformationDto",
            name: "clinicalTrialInformation",
            type: "ClinicalTrialInformationDto",
            desc: "",
            required: false,
          },
          {
            type: "HospitalDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Cdes.HospitalDto",
            },
            nullable: true,
            name: "hospitals",
            desc: "",
            required: false,
          },
          {
            type: "ECDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Cdes.ECDto",
            },
            nullable: true,
            name: "eCs",
            desc: "",
            required: false,
          },
          {
            type: "SubjectCriteriaDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Cdes.SubjectCriteriaDto",
            },
            nullable: true,
            name: "subjectCriterias",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "date-time",
            nullable: true,
            name: "lastUpdateTime",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "0CultureneutralPublicKeyTokennull",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "CdeDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Cdes.CdeDto",
            },
            nullable: true,
            name: "items",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int64",
            name: "totalCount",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "FeatureProviderDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "key",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "IValueValidator",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            readOnly: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "properties",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "IStringValueType",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            readOnly: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "properties",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.Validation.StringValues.IValueValidator",
            name: "validator",
            type: "IValueValidator",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "FeatureDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "displayName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "value",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.FeatureManagement.FeatureProviderDto",
            name: "provider",
            type: "FeatureProviderDto",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "description",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Volo.Abp.Validation.StringValues.IStringValueType",
            name: "valueType",
            type: "IStringValueType",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            name: "depth",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "parentName",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "FeatureGroupDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "displayName",
            desc: "",
            required: false,
          },
          {
            type: "FeatureDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.FeatureManagement.FeatureDto",
            },
            nullable: true,
            name: "features",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "GetFeatureListResultDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "FeatureGroupDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.FeatureManagement.FeatureGroupDto",
            },
            nullable: true,
            name: "groups",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "UpdateFeatureDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "value",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "UpdateFeaturesDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "UpdateFeatureDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.FeatureManagement.UpdateFeatureDto",
            },
            nullable: true,
            name: "features",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "UserLoginInfo",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            maxLength: 255,
            minLength: 0,
            type: "string",
            name: "userNameOrEmailAddress",
            desc: "",
            required: true,
          },
          {
            maxLength: 32,
            minLength: 0,
            type: "string",
            format: "password",
            name: "password",
            desc: "",
            required: true,
          },
          {
            type: "boolean",
            name: "rememberMe",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "LoginResultType",
      type: "1 | 2 | 3 | 4 | 5",
      parent: undefined,
      props: [
      ],
    },
    {
      typeName: "AbpLoginResult",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            $ref: "#/components/schemas/Volo.Abp.Account.Web.Areas.Account.Controllers.Models.LoginResultType",
            name: "result",
            type: "LoginResultType",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            readOnly: true,
            name: "description",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ProviderInfoDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "providerName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "providerKey",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "PermissionGrantInfoDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "displayName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "parentName",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isGranted",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "allowedProviders",
            desc: "",
            required: false,
          },
          {
            type: "ProviderInfoDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.PermissionManagement.ProviderInfoDto",
            },
            nullable: true,
            name: "grantedProviders",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "PermissionGroupDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "displayName",
            desc: "",
            required: false,
          },
          {
            type: "PermissionGrantInfoDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.PermissionManagement.PermissionGrantInfoDto",
            },
            nullable: true,
            name: "permissions",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "GetPermissionListResultDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "entityDisplayName",
            desc: "",
            required: false,
          },
          {
            type: "PermissionGroupDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.PermissionManagement.PermissionGroupDto",
            },
            nullable: true,
            name: "groups",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "UpdatePermissionDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isGranted",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "UpdatePermissionsDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "UpdatePermissionDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.PermissionManagement.UpdatePermissionDto",
            },
            nullable: true,
            name: "permissions",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ProfileDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "extraProperties",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "userName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "email",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "surname",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "phoneNumber",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isExternal",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "hasPassword",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "UpdateProfileDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "extraProperties",
            desc: "",
            required: false,
          },
          {
            maxLength: 256,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "userName",
            desc: "",
            required: false,
          },
          {
            maxLength: 256,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "email",
            desc: "",
            required: false,
          },
          {
            maxLength: 64,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            maxLength: 64,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "surname",
            desc: "",
            required: false,
          },
          {
            maxLength: 16,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "phoneNumber",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ChangePasswordInput",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            maxLength: 128,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "currentPassword",
            desc: "",
            required: false,
          },
          {
            maxLength: 128,
            minLength: 0,
            type: "string",
            name: "newPassword",
            desc: "",
            required: true,
          },
        ],
      ],
    },
    {
      typeName: "IdentityRoleDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "extraProperties",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "uuid",
            name: "id",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isDefault",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isStatic",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isPublic",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "concurrencyStamp",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "0CultureneutralPublicKeyTokennull",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "IdentityRoleDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.Identity.IdentityRoleDto",
            },
            nullable: true,
            name: "items",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "0CultureneutralPublicKeyTokennull",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "IdentityRoleDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.Identity.IdentityRoleDto",
            },
            nullable: true,
            name: "items",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int64",
            name: "totalCount",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "IdentityRoleCreateDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "extraProperties",
            desc: "",
            required: false,
          },
          {
            maxLength: 256,
            minLength: 0,
            type: "string",
            name: "name",
            desc: "",
            required: true,
          },
          {
            type: "boolean",
            name: "isDefault",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isPublic",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "IdentityRoleUpdateDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "extraProperties",
            desc: "",
            required: false,
          },
          {
            maxLength: 256,
            minLength: 0,
            type: "string",
            name: "name",
            desc: "",
            required: true,
          },
          {
            type: "boolean",
            name: "isDefault",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "isPublic",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "concurrencyStamp",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "TenantDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "extraProperties",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "uuid",
            name: "id",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "TenantUpdateDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "extraProperties",
            desc: "",
            required: false,
          },
          {
            maxLength: 64,
            minLength: 0,
            type: "string",
            name: "name",
            desc: "",
            required: true,
          },
        ],
      ],
    },
    {
      typeName: "0CultureneutralPublicKeyTokennull",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "TenantDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.TenantManagement.TenantDto",
            },
            nullable: true,
            name: "items",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int64",
            name: "totalCount",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "TenantCreateDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "extraProperties",
            desc: "",
            required: false,
          },
          {
            maxLength: 64,
            minLength: 0,
            type: "string",
            name: "name",
            desc: "",
            required: true,
          },
          {
            maxLength: 256,
            type: "string",
            format: "email",
            name: "adminEmailAddress",
            desc: "",
            required: true,
          },
          {
            maxLength: 128,
            type: "string",
            name: "adminPassword",
            desc: "",
            required: true,
          },
        ],
      ],
    },
    {
      typeName: "TrialoStudySiteDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "oldName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "contactPhone",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "introduction",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "fax",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "logoContent",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "bigLogoContent",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "email",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "receiveTime",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "siteAddress",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "otherComment",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "certificationDept",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "manageFee",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "webLink",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "fileStore",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "contractTime",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "fiFullname",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "fiAccount",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "fiBank",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "smoSelection",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "bedNumber",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "provinceName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "cityName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "address",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "levelName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "certificationDepartment",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "stageNames",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "indications",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "institutionNames",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "isCfda",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "researcherCount",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "researcherName",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "sumFinishedProject",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "sumIsLastYearNewProject",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "sumIsNewProject",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "sumUnderGoingProject",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "TrialoContactDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "email",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "telePhone",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "position",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "TrialoGeneticDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "isExperienced",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "contacts",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "position",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "contactPhone",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "email",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "address",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "isLeader",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "applicationTime",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "isProjectStart",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "TrialoECInfoDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "telephone",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "fax",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "email",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "receiveTime",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "address",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "meetingFrequency",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "isAloneECMeeting",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "isPreEthical",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "applyDate",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "approvalTime",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            nullable: true,
            name: "isLeaderEthical",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "ecFee",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "meetingTime",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "fiFullname",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "fiAccount",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "fiBank",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "TrialoDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "_id",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Wetrial.Spider.CallApi.Trialos.TrialoStudySiteDto",
            name: "studySite",
            type: "TrialoStudySiteDto",
            desc: "",
            required: false,
          },
          {
            type: "TrialoContactDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Trialos.TrialoContactDto",
            },
            nullable: true,
            name: "studySiteContacts",
            desc: "",
            required: false,
          },
          {
            type: "TrialoContactDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Trialos.TrialoContactDto",
            },
            nullable: true,
            name: "ecContacts",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Wetrial.Spider.CallApi.Trialos.TrialoGeneticDto",
            name: "genetic",
            type: "TrialoGeneticDto",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Wetrial.Spider.CallApi.Trialos.TrialoECInfoDto",
            name: "ecInfo",
            type: "TrialoECInfoDto",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "needUpdate",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "task_id",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "0CultureneutralPublicKeyTokennull",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "TrialoDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Trialos.TrialoDto",
            },
            nullable: true,
            name: "items",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int64",
            name: "totalCount",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "IdentityUserUpdateDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "extraProperties",
            desc: "",
            required: false,
          },
          {
            maxLength: 256,
            minLength: 0,
            type: "string",
            name: "userName",
            desc: "",
            required: true,
          },
          {
            maxLength: 64,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            maxLength: 64,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "surname",
            desc: "",
            required: false,
          },
          {
            maxLength: 256,
            minLength: 0,
            type: "string",
            format: "email",
            name: "email",
            desc: "",
            required: true,
          },
          {
            maxLength: 16,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "phoneNumber",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "lockoutEnabled",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "roleNames",
            desc: "",
            required: false,
          },
          {
            maxLength: 128,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "password",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "concurrencyStamp",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "0CultureneutralPublicKeyTokennull",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "IdentityUserDto[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.Identity.IdentityUserDto",
            },
            nullable: true,
            name: "items",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int64",
            name: "totalCount",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "IdentityUserCreateDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "Record<string, any>",
            additionalProperties: {
            },
            nullable: true,
            readOnly: true,
            name: "extraProperties",
            desc: "",
            required: false,
          },
          {
            maxLength: 256,
            minLength: 0,
            type: "string",
            name: "userName",
            desc: "",
            required: true,
          },
          {
            maxLength: 64,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            maxLength: 64,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "surname",
            desc: "",
            required: false,
          },
          {
            maxLength: 256,
            minLength: 0,
            type: "string",
            format: "email",
            name: "email",
            desc: "",
            required: true,
          },
          {
            maxLength: 16,
            minLength: 0,
            type: "string",
            nullable: true,
            name: "phoneNumber",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "lockoutEnabled",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "roleNames",
            desc: "",
            required: false,
          },
          {
            maxLength: 128,
            minLength: 0,
            type: "string",
            name: "password",
            desc: "",
            required: true,
          },
        ],
      ],
    },
    {
      typeName: "IdentityUserUpdateRolesDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string[]",
            items: {
              type: "string",
            },
            name: "roleNames",
            desc: "",
            required: true,
          },
        ],
      ],
    },
    {
      typeName: "UserData",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            format: "uuid",
            name: "id",
            desc: "",
            required: false,
          },
          {
            type: "string",
            format: "uuid",
            nullable: true,
            name: "tenantId",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "userName",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "surname",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "email",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "emailConfirmed",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "phoneNumber",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "phoneNumberConfirmed",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "0CultureneutralPublicKeyTokennull",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "UserData[]",
            items: {
              $ref: "#/components/schemas/Volo.Abp.Users.UserData",
            },
            nullable: true,
            name: "items",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "ConcatDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "position",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "tel",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "email",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "EthicDto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "phones",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "faxs",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "emails",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "address",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "receiveTime",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            name: "isAloneECMetting",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "meetingTime",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "mettingFrequery",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "ecFee",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "webLink",
            desc: "",
            required: false,
          },
          {
            type: "ConcatDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Yscros.ConcatDto",
            },
            nullable: true,
            name: "contacts",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "YSCRODto",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "string",
            nullable: true,
            name: "_id",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "province",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "city",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            name: "isGCP",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "logo",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "name",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            name: "pneumonia",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "updateTime",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int32",
            name: "isLogo",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "phones",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "faxs",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "emails",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "receiveTime",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "address",
            desc: "",
            required: false,
          },
          {
            type: "string[]",
            items: {
              type: "string",
            },
            nullable: true,
            name: "certificationDepts",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "manageFee",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "webLink",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "organizationDescription",
            desc: "",
            required: false,
          },
          {
            type: "ConcatDto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Yscros.ConcatDto",
            },
            nullable: true,
            name: "contacts",
            desc: "",
            required: false,
          },
          {
            $ref: "#/components/schemas/Wetrial.Spider.CallApi.Yscros.EthicDto",
            name: "ethic",
            type: "EthicDto",
            desc: "",
            required: false,
          },
          {
            type: "boolean",
            name: "needUpdate",
            desc: "",
            required: false,
          },
          {
            type: "string",
            nullable: true,
            name: "task_id",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "0CultureneutralPublicKeyTokennull",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            type: "YSCRODto[]",
            items: {
              $ref: "#/components/schemas/Wetrial.Spider.CallApi.Yscros.YSCRODto",
            },
            nullable: true,
            name: "items",
            desc: "",
            required: false,
          },
          {
            type: "number",
            format: "int64",
            name: "totalCount",
            desc: "",
            required: false,
          },
        ],
      ],
    },
    {
      typeName: "getAbpApiDefinitionParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "IncludeTypes",
            required: undefined,
            type: "boolean",
          },
        ],
      ],
    },
    {
      typeName: "getAbpMultiTenancyTenantsByNameByNameParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "name",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getAbpMultiTenancyTenantsByIdByIdParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getAppBeianExportExcelParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "Query",
            required: undefined,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getAppBeianPagedParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "Query",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "NeedUpdate",
            required: undefined,
            type: "boolean",
          },
          {
            desc: "",
            name: "Sorting",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "SkipCount",
            required: undefined,
            type: "number",
          },
          {
            desc: "",
            name: "MaxResultCount",
            required: undefined,
            type: "number",
          },
        ],
      ],
    },
    {
      typeName: "getAppCdeExportExcelParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "Query",
            required: undefined,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getAppCdePagedParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "Query",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "NeedUpdate",
            required: undefined,
            type: "boolean",
          },
          {
            desc: "",
            name: "Sorting",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "SkipCount",
            required: undefined,
            type: "number",
          },
          {
            desc: "",
            name: "MaxResultCount",
            required: undefined,
            type: "number",
          },
        ],
      ],
    },
    {
      typeName: "getAppCdePagedSourceParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "Query",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "NeedUpdate",
            required: undefined,
            type: "boolean",
          },
          {
            desc: "",
            name: "Sorting",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "SkipCount",
            required: undefined,
            type: "number",
          },
          {
            desc: "",
            name: "MaxResultCount",
            required: undefined,
            type: "number",
          },
        ],
      ],
    },
    {
      typeName: "getFeatureManagementFeaturesParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "providerName",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "providerKey",
            required: undefined,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "putFeatureManagementFeaturesParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "providerName",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "providerKey",
            required: undefined,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getPermissionManagementPermissionsParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "providerName",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "providerKey",
            required: undefined,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "putPermissionManagementPermissionsParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "providerName",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "providerKey",
            required: undefined,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getIdentityRolesParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "Filter",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "Sorting",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "SkipCount",
            required: undefined,
            type: "number",
          },
          {
            desc: "",
            name: "MaxResultCount",
            required: undefined,
            type: "number",
          },
        ],
      ],
    },
    {
      typeName: "getIdentityRolesByIdParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "putIdentityRolesByIdParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "deleteIdentityRolesByIdParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getMultiTenancyTenantsByIdParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "putMultiTenancyTenantsByIdParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "deleteMultiTenancyTenantsByIdParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getMultiTenancyTenantsParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "Filter",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "Sorting",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "SkipCount",
            required: undefined,
            type: "number",
          },
          {
            desc: "",
            name: "MaxResultCount",
            required: undefined,
            type: "number",
          },
        ],
      ],
    },
    {
      typeName: "getMultiTenancyTenantsByIdDefaultConnectionStringParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "putMultiTenancyTenantsByIdDefaultConnectionStringParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
          {
            desc: "",
            name: "defaultConnectionString",
            required: undefined,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "deleteMultiTenancyTenantsByIdDefaultConnectionStringParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getAppTrialoPagedParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "Query",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "NeedUpdate",
            required: undefined,
            type: "boolean",
          },
          {
            desc: "",
            name: "Sorting",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "SkipCount",
            required: undefined,
            type: "number",
          },
          {
            desc: "",
            name: "MaxResultCount",
            required: undefined,
            type: "number",
          },
        ],
      ],
    },
    {
      typeName: "getIdentityUsersByIdParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "putIdentityUsersByIdParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "deleteIdentityUsersByIdParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getIdentityUsersParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "Filter",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "Sorting",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "SkipCount",
            required: undefined,
            type: "number",
          },
          {
            desc: "",
            name: "MaxResultCount",
            required: undefined,
            type: "number",
          },
        ],
      ],
    },
    {
      typeName: "getIdentityUsersByIdRolesParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "putIdentityUsersByIdRolesParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getIdentityUsersByUsernameByUserNameParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "userName",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getIdentityUsersByEmailByEmailParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "email",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getIdentityUsersLookupByIdParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "id",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getIdentityUsersLookupByUsernameByUserNameParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "userName",
            required: true,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getIdentityUsersLookupSearchParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "Filter",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "Sorting",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "SkipCount",
            required: undefined,
            type: "number",
          },
          {
            desc: "",
            name: "MaxResultCount",
            required: undefined,
            type: "number",
          },
        ],
      ],
    },
    {
      typeName: "getIdentityUsersLookupCountParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "Filter",
            required: undefined,
            type: "string",
          },
        ],
      ],
    },
    {
      typeName: "getAppYscroPagedParams",
      type: "Record<string, any>",
      parent: undefined,
      props: [
        [
          {
            desc: "",
            name: "Query",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "NeedUpdate",
            required: undefined,
            type: "boolean",
          },
          {
            desc: "",
            name: "Sorting",
            required: undefined,
            type: "string",
          },
          {
            desc: "",
            name: "SkipCount",
            required: undefined,
            type: "number",
          },
          {
            desc: "",
            name: "MaxResultCount",
            required: undefined,
            type: "number",
          },
        ],
      ],
    },
  ]